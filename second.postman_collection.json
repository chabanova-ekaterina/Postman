{
	"info": {
		"_postman_id": "e3356b2b-d94c-4f7a-9831-755bd030d497",
		"name": "second",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22622826"
	},
	"item": [
		{
			"name": "/first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token\r",
							"\r",
							"console.log(resp_token)\r",
							"\r",
							"pm.environment.set(\"token\", \"resp_token\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Katy",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Req_Resp_NAME_check\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(\"katy\");\r",
							"});\r",
							"\r",
							"console.log(\"jsonData.name = \" + jsonData.name )\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Req_Resp_AGE_check\", function(){\r",
							"    pm.expect(jsonData.age).to.eql('12');\r",
							"});\r",
							"\r",
							"console.log(\"jsonData.age = \"+ jsonData.age )\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Req_Resp_SALARY_check\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"console.log(\"jsonData.salary = \"+ jsonData.salary )\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"The response name is equal to the request name\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"console.log(jsonData.name)\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Req_Resp_AGE_check\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"console.log(jsonData.age)\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Req_Resp_SALARY_check\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"// var resp = pm.response.json();\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"console.log(\"u_salary_1_5_year = \" + u_salary_1_5_year )\r",
							"\r",
							"pm.test(\"salary*4\", function(){\r",
							"    pm.expect(u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "katy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "12",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "katy",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"The response name is equal to the request name\", function(){\r",
							"    pm.expect(resp.name).to.eql(resp.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Req_Resp_AGE_check\",function(){\r",
							"pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Req_Resp_SALARY_check\", function(){\r",
							"    pm.expect(+req.salary).to.eql(resp.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"The dog parameter has name\",function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"The dog parameter has age\",function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"The name parameter is equal Luky\", function(){\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"The age parameter is equal 4\", function(){\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?age=15&name=Katy&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "15"
						},
						{
							"key": "name",
							"value": "Katy"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name in response is equal to name with request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"age in response is equal to age from request\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"The 0th element of the salary parameter is equal to the salary from request\", function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(Number(req.salary))\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"The 1st element of the salary parameter is equal to salary*2 from request\", function(){\r",
							"    pm.expect(+resp.salary[1]).to.eql(Number(req.salary)*2)\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"The 2nd element of the salary parameter is equal to salary*3 from request\", function(){\r",
							"    pm.expect(+resp.salary[2]).to.eql(Number(req.salary)*3)\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Kate\");\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"18\");\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let list_salary = resp.salary.length;\r",
							"for (let i=0; i < resp.salary; i++){\r",
							"    console.log( i, 'strict_number = ', list_salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Katy&age=18&salary=4000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Katy"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request / Insert the salary parameter from the environment into request\r",
							"// 2. Вставить параметр age из окружения в age / Insert the age parameter from the environment into age\r",
							"// 3. Вставить параметр name из окружения в name / Insert the name parameter from the environment into name\r",
							"// 4. Отправить запрос / Submit an inquiry\r",
							"// 5. Статус код 200 / Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json / Parse response body to json\r",
							"var resp = pm.response.json();\r",
							"// 7. Спарсить request / Parse request\r",
							"var req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary / Check json response has start_qa_salary parameter\r",
							"pm.test(\"The json parameter has the start_qa_salary\", function(){\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months / Check json response has qa_salary_after_6_months parameter\r",
							"pm.test(\"The json parameter has the qa_salary_after_6_months\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months / Check json response has qa_salary_after_12_months parameter\r",
							"pm.test(\"The json parameter has the qa_salary_after_12_months\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year / Check json response has qa_salary_after_1.5_year parameter\r",
							"pm.test(\"The json parameter has the qa_salary_after_1.5\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years / Check json response has qa_salary_after_3.5_years parameter\r",
							"pm.test(\"The json parameter has the qa_salary_after_3.5\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person / Check json response has person parameter\r",
							"pm.test(\"The json parameter has the person\", function(){\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request) / Check that the start_qa_salary parameter is equal to salary from request (pick salary from request)\r",
							"pm.test(\"start_qa_salary parameter is equal to salary from request\", function () {\r",
							"pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request) / Check that the qa_salary_after_6_months parameter is equal to salary*2 from request (pick salary from request)\r",
							"pm.test(\"parameter qa_salary_after_6_months is equal to salary*2\", function () {\r",
							"pm.expect(resp.qa_salary_after_6_months).to.eql((req.salary)*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request) / Check that the qa_salary_after_12_months parameter is equal to salary*2.7 from request (pick salary from request)\r",
							"pm.test(\"parameter qa_salary_after_12_months is equal to salary*2.7\", function () {\r",
							"pm.expect(resp.qa_salary_after_12_months).to.eql((req.salary)*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request) / Check that the qa_salary_after_1.5_year parameter is equal to salary*3.3 from request (pick salary from request)\r",
							"pm.test(\"parameter qa_salary_after_1.5_year is equal to salary*3.3\", function () {\r",
							"pm.expect(resp['qa_salary_after_1.5_year']).to.eql((req.salary)*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request) / Check that the qa_salary_after_3.5_years parameter is equal to salary*3.8 from request (pick salary from request)\r",
							"pm.test(\"parameter qa_salary_after_3.5_year is equal to salary*3.8\", function () {\r",
							"pm.expect(resp['qa_salary_after_3.5_years']).to.eql((req.salary)*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.) / Check that in the person parameter, the 1st element from u_name is equal to salary from request (pick salary from request.)\r",
							"pm.test(\"1\", function () {\r",
							"pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request) / Check that the u_age parameter is equal to age from request (take age from request)\r",
							"pm.test(\"2\", function () {\r",
							"pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request) / Check that the u_salary_5_years parameter is equal to salary*4.2 from request (pick salary from request)\r",
							"pm.test(\"3\", function () {\r",
							"pm.expect(resp.person.u_salary_5_years).to.eql((req.salary)*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person / *** Write a loop that will output the list items from the person parameter to the console in order\r",
							"let list_person = resp.person;\r",
							"for (let i in list_person) \r",
							"console.log(i)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}